<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HelpDesk CIBERNEO</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #541d22;
        }

        header {
            background-color: #ab2a3e;
            color: #fff;
            text-align: center;
            padding: 1em;
        }

        section {
            width: 80%;
            margin: 2em auto;
            background-color: #fff;
            padding: 1em;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        form {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5em;
        }

        input, textarea {
            margin-bottom: 1em;
            padding: 0.5em;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        button {
            padding: 0.5em;
            background-color: #ab2a3e;
            color: #fff;
            border: none;
            cursor: pointer;
        }

        button:hover {
            background-color: #ab2a3e;
        }

        #notification {
            display: none;
            background-color: #4CAF50;
            color: #fff;
            text-align: center;
            padding: 1em;
            margin-top: 1em;
        }
    </style>
</head>
<body>
    <header>
        <h1>INCIDENCIAS CIBERNEO</h1>
    </header>

    <section>
        <form id="helpdeskForm">
            <label for="name">Nombre:</label>
            <input type="text" id="name" name="name" required>

            <label for="email">Correo Electrónico:</label>
            <input type="email" id="email" name="email" required>

            <label for="issue">Descripción del Problema:</label>
            <textarea id="issue" name="issue" rows="4" required></textarea>

            <button type="button" onclick="submitTicket()">Enviar Ticket</button>
        </form>

        <div id="notification"></div>
    </section>

    <script>
        function submitTicket() {
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                issue: document.getElementById('issue').value,
            };

            // Simulación de una solicitud a un servidor (falso endpoint de API).
            fetch('https://jsonplaceholder.typicode.com/posts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            })
            .then(response => response.json())
            .then(data => {
                // Simulación de enviar un correo electrónico al usuario.
                sendEmailToUser(formData);

                // Simulación de enviar un correo electrónico al equipo de soporte.
                sendEmailToSupportTeam(formData);

                // Simulación de notificación al usuario.
                showNotification('¡Ticket enviado con éxito! Se le enviará una notificación por correo electrónico.');
                
                // Restablecer el formulario.
                document.getElementById('helpdeskForm').reset();
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Ocurrió un error al enviar el ticket. Por favor, inténtelo de nuevo más tarde.');
            });
        }

        function sendEmailToUser(formData) {
            // Simulación de enviar un correo electrónico al usuario.
            console.log(`Enviando correo electrónico a ${formData.email}...`);
            // En una aplicación real, utilizarías un servicio de envío de correo electrónico o un servidor SMTP.
        }

        function sendEmailToSupportTeam(formData) {
            // Simulación de enviar un correo electrónico al equipo de soporte.
            console.log(`Nuevo ticket de ${formData.name} (${formData.email}): ${formData.issue}`);
            // En una aplicación real, enviarías este correo electrónico al equipo de soporte utilizando un servicio de envío de correo electrónico o un servidor SMTP.

            // Simulación de enviar un correo electrónico a la dirección especificada (torres98.garcia@gmail.com).
            const supportEmailData = {
                to: 'torres98.garcia@gmail.com',
                subject: 'Nuevo Ticket de Soporte',
                body: `Nombre: ${formData.name}\nCorreo Electrónico: ${formData.email}\nDescripción del Problema: ${formData.issue}`,
            };
            sendEmail(supportEmailData);
        }

        function sendEmail(emailData) {
            // Simulación de enviar un correo electrónico (lado del servidor).
            console.log(`Enviando correo electrónico a ${emailData.to} - Asunto: ${emailData.subject}\nCuerpo: ${emailData.body}`);
            // En una aplicación real, implementarías la lógica del servidor para enviar correos electrónicos.
        }

        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.display = 'none';
            }, 5000);  // Ocultar la notificación después de 5 segundos.
        }
    </script>
</body>
</html>
